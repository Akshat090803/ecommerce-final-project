
-- Create profiles table for user data
CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email TEXT NOT NULL,
  full_name TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create products table with dummy data
CREATE TABLE public.products (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  image TEXT,
  category TEXT NOT NULL,
  rating DECIMAL(2,1) DEFAULT 4.5,
  stock INTEGER DEFAULT 100,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create orders table
CREATE TABLE public.orders (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  total_amount DECIMAL(10,2) NOT NULL,
  status TEXT DEFAULT 'pending',
  payment_id TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create order_items table
CREATE TABLE public.order_items (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  order_id UUID REFERENCES public.orders(id) ON DELETE CASCADE,
  product_id UUID REFERENCES public.products(id) ON DELETE CASCADE,
  quantity INTEGER NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable Row Level Security
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.order_items ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for profiles
CREATE POLICY "Users can view own profile" ON public.profiles
  FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON public.profiles
  FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Users can insert own profile" ON public.profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

-- Create RLS policies for products (public read access)
CREATE POLICY "Anyone can view products" ON public.products
  FOR SELECT USING (true);

-- Create RLS policies for orders
CREATE POLICY "Users can view own orders" ON public.orders
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can create own orders" ON public.orders
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own orders" ON public.orders
  FOR UPDATE USING (auth.uid() = user_id);

-- Create RLS policies for order_items
CREATE POLICY "Users can view own order items" ON public.order_items
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM public.orders 
      WHERE orders.id = order_items.order_id 
      AND orders.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can create order items" ON public.order_items
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.orders 
      WHERE orders.id = order_items.order_id 
      AND orders.user_id = auth.uid()
    )
  );

-- Insert dummy products
INSERT INTO public.products (name, description, price, image, category, rating, stock) VALUES
('Premium Smartphone', 'Latest smartphone with advanced features and stunning display', 699.99, 'ðŸ“±', 'electronics', 4.8, 50),
('Wireless Headphones', 'High-quality wireless headphones with noise cancellation', 199.99, 'ðŸŽ§', 'electronics', 4.6, 75),
('Designer T-Shirt', 'Comfortable cotton t-shirt with modern design', 29.99, 'ðŸ‘•', 'clothing', 4.4, 100),
('Smart Watch', 'Feature-rich smartwatch with health monitoring', 299.99, 'âŒš', 'electronics', 4.7, 30),
('Running Shoes', 'Comfortable running shoes with excellent cushioning', 89.99, 'ðŸ‘Ÿ', 'clothing', 4.5, 60),
('Coffee Maker', 'Automatic coffee maker with programmable settings', 149.99, 'â˜•', 'home', 4.3, 25),
('Gaming Laptop', 'High-performance gaming laptop with RTX graphics', 1299.99, 'ðŸ’»', 'electronics', 4.9, 15),
('Winter Jacket', 'Warm winter jacket with water-resistant material', 79.99, 'ðŸ§¥', 'clothing', 4.2, 40),
('Bluetooth Speaker', 'Portable bluetooth speaker with rich sound quality', 79.99, 'ðŸ”Š', 'electronics', 4.5, 80),
('Kitchen Mixer', 'Professional kitchen mixer for baking enthusiasts', 249.99, 'ðŸ¥„', 'home', 4.6, 20),
('Yoga Mat', 'Premium yoga mat with non-slip surface', 39.99, 'ðŸ§˜', 'fitness', 4.4, 90),
('Desk Lamp', 'Modern LED desk lamp with adjustable brightness', 59.99, 'ðŸ’¡', 'home', 4.3, 70);

-- Create function to handle new user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
  INSERT INTO public.profiles (id, email, full_name)
  VALUES (new.id, new.email, new.raw_user_meta_data->>'full_name');
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger for new user signup
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
